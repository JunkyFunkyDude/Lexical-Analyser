using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Lexical_analyser
{
    class Program
    {
        const string Language = "abcdefghijklmnopqrstuvwxyz0123456789<>=!. ";
        static int[] KeywordsStates = {5,11,15,19,21,23,28,31,35,39,41,46,51,56,63,62,64,67,68,69,65,70 };
        static int[,] Table = { 
                               {
                                   57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,2,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   3,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,4,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,5,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,7,57,57,12,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,8,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,9,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,10,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,11,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,13,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,15,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,17,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,18,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,19,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,21,57,57,57,57,57,57,57,22,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,23,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,29,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   27,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,28,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   30,57,57,57,57,57,57,57,57,57,57,57,57,57,57,25,57,57,57,32,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,31,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,33,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,34,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                   57,57,57,57,57,57,57,57,57,57,57,57,57,35,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  40,57,57,57,57,57,57,57,57,57,57,57,57,57,37,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,38,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,39,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                 57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,41,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0 
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,43,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,44,57,57,57,57,57,47,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,45,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,46,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,48,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,49,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  50,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,51,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,54,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,55,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,68,69,62,70,70,0
                               },
                               {
                                  70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,59,59,59,59,59,59,59,59,59,59,68,69,62,70,60,0
                               },
                               {
                                  70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,61,61,61,61,61,61,61,61,61,61,70,70,70,70,70,60
                               },
                               {
                                 70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,61,61,61,61,61,61,61,61,61,61,61,61,62,70,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,64,63,65,66,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,67,70,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                  57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                 57,57,57,52,57,6,57,57,20,57,57,57,57,57,57,42,57,24,1,16,57,36,57,57,57,57,59,59,59,59,59,59,59,59,59,59,70,70,70,70,70,0
                               },
                               {
                                 70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0
                               },
                               };

        static void Main(string[] args)
        {
            Parse(File.ReadAllLines("CODE.txt"));
            Console.WriteLine("Press Any Key To Exit");
            Console.ReadKey();
        }
        static void Parse(string[] Input)
        {
            int LastTokenIndex;
            int state;
            string text = string.Empty;
            bool isSpaceDivider;
            for (int k = 0; k < Input.Length; k++)
            {
                if(string.IsNullOrEmpty(Input[k]))
                    continue;
                Console.WriteLine("\nParsing : \"" + Input[k] + "\"" );
                state = 0;
                LastTokenIndex = 0;
                isSpaceDivider = false;
                text = string.Copy(Input[k]).ToLower();             
                for (int i = 0; i < text.Length; i++)
                {
                        isSpaceDivider = Table[state, Language.IndexOf(text[i])] == (int)Token.T_EndOfToken;
                        if ((Table[state, Language.IndexOf(text[i])] < 62 && state > 61 && Table[state, Language.IndexOf(text[i])] != 70) 
                            || (Table[state, Language.IndexOf(text[i])] > 61 && state < 62 && Table[state, Language.IndexOf(text[i])] != 70) 
                            || isSpaceDivider /*|| i == text.Length70*/)
                        {
                            if (isSpaceDivider)
                              i++;
                            if (state == 70)
                            {
                                Console.WriteLine("Unknown Command at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex, i - LastTokenIndex) );
                                LastTokenIndex = i;
                            }
                            //must show stuff here !
                            else if (KeywordsStates.Contains(state))
                            {
                                //its a keyword 
                                Console.WriteLine("Keyword \"" + ((Token)state).ToString() + "\" at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString());
                                LastTokenIndex = i;
                            }
                            else
                            {
                                // its a id or constant
                                if (state == 59)
                                {
                                    //its a number
                                    Console.WriteLine("Const Integer Number at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex, i - LastTokenIndex) );
                                    LastTokenIndex = i;
                                }
                                else if (state == 61)
                                {
                                    Console.WriteLine("Const Float Number at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex, i - LastTokenIndex) );
                                    LastTokenIndex = i;
                                }
                                else if (state <59 && state!=0
)
                                {
                                    // its a ID
                                    Console.WriteLine("identifier at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex, i - LastTokenIndex) );
                                    LastTokenIndex = i;
                                }
                                else 
                                    LastTokenIndex = i;
                            }
                            if (isSpaceDivider)
                                i--;
                        }
                    
                    state = Table[state, Language.IndexOf(text[i])];
                }
                if (state != 0) // igonre space and restarting
                {
                    if (state == 70)
                        Console.WriteLine("Unknown Command at Line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex) );
                    
                    else
                        if (KeywordsStates.Contains(state))
                            Console.WriteLine("Keyword \"" + ((Token)state).ToString() + "\" at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString());
                        
                        else
                        {
                            if (isSpaceDivider)
                                LastTokenIndex++;
                            // its a id or constant
                            if (state == 59)
                                Console.WriteLine("Const Integer Number at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " =  " + Input[k].Substring(LastTokenIndex) );
                           
                            else if (state == 61)
                                Console.WriteLine("Const Float Number at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex) );
                            
                            else if (state == 57 || state == 58)
                                Console.WriteLine("identifier at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex) );
                            
                            else
                                Console.WriteLine("Unknown Command at line:" + (k + 1).ToString() + ", char:" + (LastTokenIndex + 1).ToString() + " = " + Input[k].Substring(LastTokenIndex) );  
                        }
                }
                Console.WriteLine("\n==========================================================================================");
            }
        }
    }
    enum Token
    {
        T_Start = 5,
        T_Finish = 11,
        T_Float = 15,
        T_Then = 19,
        T_If = 21,
        T_Int = 23,
        T_Repeat = 28,
        T_Read = 31,
        T_Return = 35,
        T_Void = 39,
        T_Var = 41,
        T_Print = 46,
        T_Program = 51,
        T_Dummy = 56,
        T_ConstInt = 59,
        T_ConstFloat = 61,
        T_ID = 57,
        T_ID_1 = 58,
        T_GreaterSign = 69,
        T_LesserSign = 68,
        T_GreaterEqualSign = 63,
        T_LesserEqualSign = 64,
        T_NotEqualSign = 67,
        T_AssignSign = 62,
        T_EqualSign = 65,
        T_Error = 70,
        T_EndOfToken = 0
    }
}
